(defpoll thour :interval "60s" "date +'%I'")
(defpoll tmin :interval "60s" "date +'%M'")
(defpoll tpm :interval "60s" "date +'%p'")
(defpoll volumemute :interval "1s" "pacmd list-sinks | awk '/muted/ { print $2 }' | tail -1")
(defpoll volume :interval "1s" "amixer sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%' | head -1")
(defpoll brightness :interval "2s" "brightnessctl -m | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defpoll wifi_icon :interval "1m" "./scripts/wifi --ICON")
(defpoll wifi_essid :interval "1m" "./scripts/wifi --ESSID")
(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")
(deflisten literalworkspace "./scripts/workspaces.sh")

;; mpd
(deflisten song "./scripts/music_info --song")
(deflisten artist "./scripts/music_info --artist")
(defpoll current :interval "1s" "./scripts/music_info --time")
(defpoll ctime :interval "1s" "./scripts/music_info --ctime")
(defpoll ttime :interval "1s" "./scripts/music_info --ttime")
(deflisten cover "./scripts/music_info --cover")
(deflisten status "./scripts/music_info --status")

;; playerctl
(deflisten psong "playerctl metadata --format '{{ title }}' -F")
(deflisten partist "playerctl metadata --format '{{ artist }}' -F")
(deflisten pcover "./scripts/pollcover.sh")
(deflisten pstatus "playerctl status -F")

(defvar reveal1 false)
(defvar reveal2 false)
(defvar revealmpd false)

(defwindow bar 
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "42px"
    :height "1080px"
    :anchor "center left")
  :reserve (struts :distance "50px" :side "left")
  ;; :stacking "bg"
  :exclusive true
  :monitor 0
  ;; :windowtype "dock"
  :wm-ignore false
  (barstruct))

(defwidget barstruct []
  (box 
    :class "bar"
    :orientation "v"
    :vexpand false
    :height "1080px"
    :space-evenly true
    (top)
    (bottom)
    ))

(defwidget top [] 
  (box
    :orientation "v"
    :space-evenly false
    :valign "start"
    :class "top_modules"
    :height "450px"
    :vexpand false
    (dashboard)
    (workspaces)
    (playerctl)
  ))

(defwidget center [] 
  (box
    :orientation "v"
    :space-evenly false
    :valign "center"
    :vexpand false
    :class "center_modules"
    :height "180px"
  ))

(defwidget bottom [] 
  (box
    :orientation "v"
    :space-evenly false
    :valign "end"
    :class "bottom_modules"
    :height "450px"
    :vexpand false
    :hexpand false
    (sliders)
    (battery)
    (clock)
  ))

(defwidget workspaces []
  (literal :content literalworkspace))

(defwidget dashboard []
    (box
        :class "widget"
        :hexpand false
        :vexpand false
        (eventbox
            ;; :onclick "~/.config/eww/meowidgets/scripts/launch"
            :onclick "~/.config/eww/meowayland/scripts/launch"
            ;; :onrightclick "./scripts/toggletheme"
            :cursor "pointer"
            (label :text "" :style "color: #a6e3a1; padding: 0px 10px 0px 0px; font-size: 20px;"))))

(defwidget clock [] 
  (eventbox
    :onclick "./scripts/pop calendar"
    (box 
      :orientation "v"
      :space-evenly false 
      :class "widget clock"

      (label :text thour)
      (label :text tmin)
      (label :text tpm))))

(defwidget battery [] 
  (box
    :orientation "v"
    :space-evenly false 
    :class "widget"
    (overlay
      (scale 
        :style "min-width: 17px; border-radius: 5px;"
        :class {EWW_BATTERY['BAT0'].status == "Charging" ? "charging": EWW_BATTERY['BAT0'].capacity < 16 ? "dying": ""}
        :value "${EWW_BATTERY['BAT0'].capacity}"
        :orientation "v"
        :max 101
        :min 0
        :flipped true)
        (label 
          :style "color: #f9e2af;"
          :text "${EWW_BATTERY['BAT0'].status == "Charging" ? "󱐋": ""}"))
    (label :text "${EWW_BATTERY['BAT0'].capacity}%")))

(defwidget playerctl [] 
  (box 
    :class "${revealmpd ? "mpd" : "playerctl"} widget"
    :orientation "v"
    (eventbox 
      :onclick "./scripts/pop music"
      (image :style "border-radius: 25px;" :path { revealmpd ? cover : pcover} :image-width 20 :image-height 20))
    (button :class "icon" :onclick { revealmpd ? "./scripts/music_info --prev" : "playerctl previous" } (label :text "󰒮"))
    (button :class "icon" :style "padding-right: 3px;" :onclick { revealmpd ? "./scripts/music_info --toggle" : "playerctl play-pause" } (label :text  {revealmpd ? status : pstatus == "Playing" ? "" : ""}))
    (button :class "icon" :onclick { revealmpd ? "./scripts/music_info --next" : "playerctl next"} (label :text "󰒭"))
    (button :class "icon" :tooltip { revealmpd ? "mpd" : "mpris" } :onclick { revealmpd ? "${EWW_CMD} update revealmpd=false" : "${EWW_CMD} update revealmpd=true"} (label :text { revealmpd ? "󱨥" : "󱨦"}))))

(defwidget sliders [] 
    (box
        :class "widget"
        :orientation "v"
        :space-evenly false
        :valign "end"
        (button :onclick "alacritty -e nmtui" :style "padding-right: 3px;" :tooltip wifi_essid :class "icon" wifi_icon)
        (reveal_on_hover
            :revealval reveal1
            :revealvalstr "reveal1"
            (box
                :orientation "v"
                :space-evenly false
                :class "sound"
                (label :style "padding-right: 4px" :class "icon sound" :text {volumemute == 'no' ? "󰕾" : "󰖁"})
                ;; {volumemute == 'no' ? volume : " Muted"})
                )
            (scale 
                :class "volslide"
                :value volume
                :onchange "amixer sset Master {}%"
                :orientation "v"
                :tooltip "${volume}%"
                :max 101
                :min 0
                :flipped true))
        (reveal_on_hover
            :revealval reveal2
            :revealvalstr "reveal2"
            (box 
                :orientation "v"
                :space-evenly false
                :class "bright"
                (label :style "padding-right: 8px;" :class "icon" :text "󰃞"))
            (scale 
                :class "brislide"
                :value brightness
                :onchange "brightnessctl set {}%"
                :orientation "v"
                :tooltip "${brightness}%"
                :max 100
                :min 0
                :flipped true))
        ))

(defwidget reveal_on_hover [revealval revealvalstr ?class ?transition]
    (box 
        :class "reveal_on_hover ${class}"
        :orientation "v"
        :space-evenly false
        :valign "end"
        (eventbox
            :onhover "${EWW_CMD} update ${revealvalstr}=true"
            :onhoverlost "${EWW_CMD} update ${revealvalstr}=false"
            (box 
                :space-evenly false
                :orientation "v"
                (children :nth 0)
                (revealer 
                    :reveal revealval
                    :transition {transition ?:"slidedown"}
                    :duration "500ms"
                    (children :nth 1))))))

;; other windows
(defwindow calendar
    :geometry (geometry :x "10px"
       :y "10px"
       :width "100px"
       :height "35px"
       :anchor "bottom left")
    :stacking "fg"
    :monitor 0
    (box
        :class "cal_window"
        (calendar :day calendar_day :year calendar_year :class "cal")))

(defwindow music 
  :geometry (geometry :x "10px"
              :y "170px"
              :width "440px"
              :height "200px"
              :anchor "top left")
  :stacking "fg"
  :monitor 0
  (box 
    :class "bar"
    :style "border-radius: 5px;"
    (box
      :orientation "h"
      :class "widget"
      :space-evenly false 
      :style "margin: 5px;"
      (image :style "margin: 8px" :image-height 180 :image-width 180 :path { revealmpd ? cover : pcover })
      (box
        :orientation "v"
        :space-evenly false 
        :width 210
        :height 200
        (scroll
          :hscroll true
          :vscroll false
          (label :style "font-size: 20px; margin-top: 30px;" :text { revealmpd ? song : psong }))
        (scroll
          :hscroll true
          :vscroll false
          (label :text { revealmpd ? artist : partist }))
        (box 
          :orientation "h"
          :class "mpd_controls"
          :style "margin-top: 10px;"
          (button :onclick { revealmpd ? "./scripts/music_info --prev" : "playerctl previous"} (label :text "󰒮"))
          (button :style "padding-right: 3px;" :onclick { revealmpd ? "./scripts/music_info --toggle" : "playerctl play-pause" } (label :text { revealmpd ? status : pstatus == "Playing" ? "" : ""} ))
          (button :onclick { revealmpd ? "./scripts/music_info --next" : "playerctl next"} (label :text "󰒭")))
        (scale 
          :visible revealmpd
          :class "seektime"
          :value current 
          :orientation "h"
          :min -5
          :max 100
          :tooltip "${ctime}/${ttime}")
        ))))
